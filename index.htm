<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Lovish's Project
    
          </title>
    <style>
    	* { padding: 0; margin: 30; }
    	canvas { background:"black";display: block; margin: 15px auto;  }
        body{ background-image:url(playstation_gamepad_crash_22102_1920x1080.jpg);}
    </style>

</head>

    
    
    
    <body>

      <embed src="Ignite%20-%20K-391%20(Alan%20Walker)_320(Mp3Paji.In).mp3" hidden="true" autostart="true" loop="true">  

        <p id="demo"></p>

<script>
var myVar = setInterval(myTimer, 1000);

function myTimer() {
  var d = new Date();
  var t = d.getHours();
    var y=d.getMinutes();
    var z=d.getSeconds();

fun1();
}

   
</script>
    
    <script>
    
    
        function fun1()
    {
          var d = new Date();
  var t = d.getHours();
    var y=d.getMinutes();
    var z=d.getSeconds();
window.document.my.hh.value=t;
window.document.my.mm.value=y;
window.document.my.ss.value=z;
}
        
        
        
        
        
        
        
        
        
        
        
        
        
        </script>
           
        
   <form name="my">
    
   <font color="aqua">HH</font> 
        <input type="text" name="hh">
      <font color="aqua">MM</font>   
        <input type="text" name="mm">
        <font color="aqua">SS</font>
        <input type="text" name="ss">
    
     
    </form>
    <center>
<p><font color="aqua">Press P to Pause/Resume the Game</font></p> 
        </center>
<canvas id="myCanvas" width="1000" height="420" style="border: 1px solid aqua"></canvas>
<canvas id="dialog" hidden></canvas>
>
        <script>

    
    
var canvas = document.getElementById("myCanvas");
var ctx = canvas.getContext("2d");
    const dialogcvs=document.getElementById('dialog');
    const dialogctx=dialog.getContext('2d');
    
var ballRadius = 10;
var x = canvas.width/2;
var y = canvas.height-30;
var dx = 2;
var dy = -2;
var paddleHeight = 10;
var paddleWidth = 75;
var paddleX = (canvas.width-paddleWidth)/2;
var rightPressed = false;
var leftPressed = false;
var brickRowCount = 11;
var brickColumnCount = 5;
var brickWidth = 75;
var brickHeight = 20;
var brickPadding = 10;
var brickOffsetTop = 30;
var brickOffsetLeft = 30;
var score = 0;
var lives = 3;
    var paused="false";

var bricks = [];
for(var c=0; c<brickColumnCount; c++) {
  bricks[c] = [];
  for(var r=0; r<brickRowCount; r++) {
    bricks[c][r] = { x: 0, y: 0, status: 1 };
  }
}

document.addEventListener("keydown", keyDownHandler, false);
document.addEventListener("keyup", keyUpHandler, false);
document.addEventListener("mousemove", mouseMoveHandler, false);
    
    
    
    
            window.addEventListener('keydown', pauseGameKeyHandler, false);

            function pauseGameKeyHandler(e) {
                var keyCode = e.keyCode;
                switch(keyCode){
                    case 80: //p
                    togglePause();
                
                   
                        break;

                
                
                }

            }

            function togglePause() {
                paused = !paused;
                draw();
            }


   
    
function keyDownHandler(e) {
    if(e.key == "Right" || e.key == "ArrowRight") {
        rightPressed = true;
    }
    else if(e.key == "Left" || e.key == "ArrowLeft") {
        leftPressed = true;
    }
}

function keyUpHandler(e) {
    if(e.key == "Right" || e.key == "ArrowRight") {
        rightPressed = false;
    }
    else if(e.key == "Left" || e.key == "ArrowLeft") {
        leftPressed = false;
    }
}

function mouseMoveHandler(e) {
  var relativeX = e.clientX - canvas.offsetLeft;
  if(relativeX > 0 && relativeX < canvas.width) {
    paddleX = relativeX - paddleWidth/2;
  }
}
function collisionDetection() {
  for(var c=0; c<brickColumnCount; c++) {
    for(var r=0; r<brickRowCount; r++) {
      var b = bricks[c][r];
      if(b.status == 1) {
        if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {
          dy = -dy;
          b.status = 0;
          score++;
          if(score == brickRowCount*brickColumnCount) {
            alert("YOU WIN, CONGRATS!");
            document.location.reload();
          }
        }
      }
    }
  }
}

function drawBall() {
  ctx.beginPath();
  ctx.arc(x, y, ballRadius, 0, Math.PI*2);
  ctx.fillStyle = "aqua";
  ctx.fill();
  ctx.closePath();
}
function drawPaddle() {
  ctx.beginPath();
  ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);
  ctx.fillStyle = "#aqua";
  ctx.fill();
  ctx.closePath();
}
function drawBricks() {
  for(var c=0; c<brickColumnCount; c++) {
    for(var r=0; r<brickRowCount; r++) {
      if(bricks[c][r].status == 1) {
        var brickX = (r*(brickWidth+brickPadding))+brickOffsetLeft;
        var brickY = (c*(brickHeight+brickPadding))+brickOffsetTop;
        bricks[c][r].x = brickX;
        bricks[c][r].y = brickY;
        ctx.beginPath();
        ctx.rect(brickX, brickY, brickWidth, brickHeight);
        ctx.fillStyle = "aqua";
        ctx.fill();
        ctx.closePath();
      }
    }
  }
}
function drawScore() {
  ctx.font = "20px Arial";
  ctx.fillStyle = "aqua";
  ctx.fillText("Score: "+score, 8, 20);
}
function drawLives() {
  ctx.font = "20px Arial";
  ctx.fillStyle = "aqua";
  ctx.fillText("Lives: "+lives, canvas.width-70, 20);
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawBricks();
  drawBall();
  drawPaddle();
  drawScore();
  drawLives();
  collisionDetection();

  if(x + dx > canvas.width-ballRadius || x + dx < ballRadius) {
    dx = -dx;
  }
  if(y + dy < ballRadius) {
    dy = -dy;
  }
  else if(y + dy > canvas.height-ballRadius) {
    if(x > paddleX && x < paddleX + paddleWidth) {
      dy = -dy;
    }
    else {
      lives--;
      if(!lives) {
   
   alert("GAME OVER");    
        document.location.reload();
      }
      else {
        x = canvas.width/2;
        y = canvas.height-30;
        dx = 3;
        dy = -3;
        paddleX = (canvas.width-paddleWidth)/2;
      }
    }
  }

  if(rightPressed && paddleX < canvas.width-paddleWidth) {
    paddleX += 7;
  }
  else if(leftPressed && paddleX > 0) {
    paddleX -= 7;
  }

  x += dx;
  y += dy;
    
    if(!paused) {
                requestAnimationFrame(draw);
            }

}
draw();

        </script>
    
</body>
</html>
